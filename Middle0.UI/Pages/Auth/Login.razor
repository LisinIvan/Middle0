@page "/auth/login"
@using Middle0.Domain.Common.DTO;
@using Microsoft.AspNetCore.WebUtilities;

<h3>Вход</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div style="color:green">@SuccessMessage</div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div style="color:red">@ErrorMessage</div>
}

<EditForm Model="@Input" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="Input.Email" />
    </div>

    <div>
        <label>Password:</label><br />
        <InputText @bind-Value="Input.Password" type="password" />
    </div>

    <button type="submit">Войти</button>
</EditForm>

@code {
    [Inject] private HttpClient Http { get; set; }
    [Inject] private NavigationManager Nav { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private LoginDto Input = new();
    private string ErrorMessage;
    private string SuccessMessage;
    private string ReturnUrl;

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            ReturnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        ErrorMessage = "";
        SuccessMessage = "";

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", Input);

            if (response.IsSuccessStatusCode)
            {
                //SuccessMessage = "✅ Successful login!";
                //Input = new LoginDto();

                // SuccessMessage = "✅ Successful login!";
                // Input = new LoginDto();
                // // редирект
                // if (!string.IsNullOrEmpty(ReturnUrl))
                //     Nav.NavigateTo(ReturnUrl, forceLoad: true);
                // else
                //     Nav.NavigateTo("/", forceLoad: true);

                // читаем JSON с токеном
                var result = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    // сохраняем токен в localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                    SuccessMessage = "✅ Successful login!";
                    Input = new LoginDto();

                    // редирект
                    if (!string.IsNullOrEmpty(ReturnUrl))
                        Nav.NavigateTo(ReturnUrl, forceLoad: true);
                    else
                        Nav.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    ErrorMessage = "⚠️ Сервер не вернул токен";
                }
            }
            else
            {
                ErrorMessage = $"❌ Login error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"⚠️ Connection error: {ex.Message}";
        }
    }
}