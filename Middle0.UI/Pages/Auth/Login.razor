@page "/auth/login"

<h3>Вход</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div style="color:green">@SuccessMessage</div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div style="color:red">@ErrorMessage</div>
}

<EditForm Model="@Input" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Имя пользователя:</label><br />
        <InputText @bind-Value="Input.Username" />
    </div>

    <div>
        <label>Пароль:</label><br />
        <InputText @bind-Value="Input.Password" type="password" />
    </div>

    <button type="submit">Войти</button>
</EditForm>

@code {
    [Inject] private HttpClient Http { get; set; }
    [Inject] private NavigationManager Nav { get; set; }

    private LoginDto Input = new();
    private string ErrorMessage;
    private string SuccessMessage;

    private async Task HandleLogin()
    {
        ErrorMessage = "";
        SuccessMessage = "";

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", Input);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "✅ Successful login!";
                Input = new LoginDto(); // очистка формы
                //await Task.Delay(1500); // дать время увидеть сообщение
                //Nav.NavigateTo("/"); // перенаправляем на главную или другую страницу
            }
            else
            {
                //var errors = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"❌ Login error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"⚠️ Connection error: {ex.Message}";
        }
    }

    public class LoginDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}