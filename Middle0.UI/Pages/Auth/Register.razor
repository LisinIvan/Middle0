@page "/auth/register"
@using Middle0.Domain.Common.DTO;
@using System.Text.RegularExpressions

<h3>Регистрация</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div style="color:green">@SuccessMessage</div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div style="color:red">@((MarkupString)ErrorMessage)</div>
}

<EditForm Model="@Input" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Имя пользователя:</label><br />
        <InputText @bind-Value="Input.Username" />
        <ValidationMessage For="@(() => Input.Username)" />
    </div>

    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="Input.Email" />
        <ValidationMessage For="@(() => Input.Email)" />
    </div>

    <div>
        <label>Пароль:</label><br />
        <InputText @bind-Value="Input.Password" type="password" />
        <ValidationMessage For="@(() => Input.Password)" />
    </div>

    <button type="submit">Зарегистрироваться</button>
</EditForm>

@code {
    [Inject] private HttpClient Http { get; set; }
    [Inject] private ILogger<Register> Logger { get; set; }

    private RegisterDto Input = new();
    private string ErrorMessage;
    private string SuccessMessage;

    private async Task HandleRegister()
    {
        ErrorMessage = "";
        SuccessMessage = "";
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/register", Input);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "User successfully registered!";
                Input = new RegisterDto();
            }
            else
            {
                var json = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("Error registration: {Errors}", json);

                try
                {
                    var errors = System.Text.Json.JsonSerializer.Deserialize<List<IdentityErrorDto>>(json);

                    if (errors != null && errors.Count > 0)
                    {
                        ErrorMessage = string.Join("<br/>", errors.Select(e => e.description));
                    }
                    else
                    {
                        ErrorMessage = "Registration failed. Please check your details and try again.";
                    }
                }
                catch
                {
                    
                    ErrorMessage = "A user with this email is already registered.";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while trying to register user");
            ErrorMessage = $"Error connection: {ex.Message}";
        }
    }
    public class ErrorResponse
    {
        public string Message { get; set; }
    }

}